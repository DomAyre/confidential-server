serve:
  - path: readme.md
    policies: strict

security_policies:
  #  Derived with `cat examples/security_policies/strict.rego | base64 -w 0`
  strict: 
